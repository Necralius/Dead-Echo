//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/DeadEchoProject/Scripts/InputSystem/InputMaps.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaps: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaps()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaps"",
    ""maps"": [
        {
            ""name"": ""PC_Map"",
            ""id"": ""4b03f44b-7a1f-46c6-b0c7-c4ba244796cc"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""098a3513-4350-4f8b-8630-88edd0cb5a54"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d2b5adfe-c34e-460c-89d4-3deb83e3787e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SprintAction"",
                    ""type"": ""Button"",
                    ""id"": ""20232a6b-56b0-409b-9325-82cea4458247"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7ecfc215-37ba-4710-b7ec-8040a8f747ae"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""123cc452-67c2-4d4a-901d-8272598d5e49"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5406688a-4511-4fb3-a749-9566977b36c5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2fae29b4-f5b7-43d7-a183-521d8e937978"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""67b95f10-7f03-444e-b322-aa34b10acfae"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5f65f4a1-ca67-4833-b2f9-2d4cb63ffd27"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""551dcbf2-16d1-4b6b-a58e-3416bada146a"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PC_Map
        m_PC_Map = asset.FindActionMap("PC_Map", throwIfNotFound: true);
        m_PC_Map_Look = m_PC_Map.FindAction("Look", throwIfNotFound: true);
        m_PC_Map_Move = m_PC_Map.FindAction("Move", throwIfNotFound: true);
        m_PC_Map_SprintAction = m_PC_Map.FindAction("SprintAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PC_Map
    private readonly InputActionMap m_PC_Map;
    private List<IPC_MapActions> m_PC_MapActionsCallbackInterfaces = new List<IPC_MapActions>();
    private readonly InputAction m_PC_Map_Look;
    private readonly InputAction m_PC_Map_Move;
    private readonly InputAction m_PC_Map_SprintAction;
    public struct PC_MapActions
    {
        private @InputMaps m_Wrapper;
        public PC_MapActions(@InputMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_PC_Map_Look;
        public InputAction @Move => m_Wrapper.m_PC_Map_Move;
        public InputAction @SprintAction => m_Wrapper.m_PC_Map_SprintAction;
        public InputActionMap Get() { return m_Wrapper.m_PC_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PC_MapActions set) { return set.Get(); }
        public void AddCallbacks(IPC_MapActions instance)
        {
            if (instance == null || m_Wrapper.m_PC_MapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PC_MapActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @SprintAction.started += instance.OnSprintAction;
            @SprintAction.performed += instance.OnSprintAction;
            @SprintAction.canceled += instance.OnSprintAction;
        }

        private void UnregisterCallbacks(IPC_MapActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @SprintAction.started -= instance.OnSprintAction;
            @SprintAction.performed -= instance.OnSprintAction;
            @SprintAction.canceled -= instance.OnSprintAction;
        }

        public void RemoveCallbacks(IPC_MapActions instance)
        {
            if (m_Wrapper.m_PC_MapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPC_MapActions instance)
        {
            foreach (var item in m_Wrapper.m_PC_MapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PC_MapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PC_MapActions @PC_Map => new PC_MapActions(this);
    public interface IPC_MapActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnSprintAction(InputAction.CallbackContext context);
    }
}
